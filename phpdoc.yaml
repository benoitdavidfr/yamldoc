path: /yamldoc
title: yamldoc - Gestion en mode web de documents structurés en Yaml
doc: |
  Le cryptage n'est pas une bonne solution car c'est incompatible avec git
  Notamment, git ne pourra pas fusionner des documents modifiés différemment sur 2 sites.
  Il faut plutot gérer une instance git serveur distincte de github.
  
  Gestion d'un ensemble de documents inter-reliés.
  Chaque document est stocké dans un fichier dont le nom est un id unique (uid) généré automatiquement.
  Le contenu du document est formatté en Yaml.
  La connaissance de l'uid d'un document permet d'y accéder en lecture et en mise à jour sauf s'il est protégé,
  ce qui est effectué en indiquant la liste des écrivains autorisés.
  Un document peut être typé correspondant à priori à un schéma particulier.
  La navigation entre documents est organisée au travers de documents particuliers de type catalogue, qui référencent
  d'autres documents par leur uid en leur affectant notamment un titre.
  Le gestionnaire de documents mémorise le chemin des catalogues traversés ; chaque nouveau document est référencé 
  dans le dernier catalogue traversé.
  Lorsqu'aucun catalogue n'a été utilisé, à la création d'un document, un catalogue est créé.
  Il est recommandé à chaque utilisateur de mémoriser (par ex. en signet) l'uid de son catalogue racine permettant
  d'accéder à ses documents. Cet uid identifie chaque utilisateur.
  Si un document contient des listes de tuples, chaque liste est affichée sous la forme d'un tableau.
  Des gestionnaires spécifiques permettent d'éditer des documents ayant une structure particulière.
  
  A la place du type prévoir:
    - un yamlSchema qui définit éventuellement la structure du document
    - un format d'affichage qui définit la manière d'afficher le doc
    
  Chaque document est affiché de manière générique sous la forme de tableaux Html imbriqués.
  Les tuples [key: valeur] sont affichés sous la forme d'un tableau dans lequel chaque clé/valeur correspond
  à une ligne, la clé est affichée comme première colonne et la valeur comme seconde colonne.
  Les listes de tuples sont affichées sous la forme d'un tableau avec en colonne les clés des tuples et une ligne
  par tuple.
  Les autres listes de valeurs sont affichées sous la forme d'un tableau ayant une seule colonne.
  
  Autre possibilité:
    utiliser le premier niveau de clés comme sous-titres
  
  Ce projet est synchronisé vers https://github.com/benoitdavidfr/yamldoc.git
  Le répertoire des docs est synchronisé vers https://github.com/benoitdavidfr/yamldocs.git
  
  Pour recopier vers github:
    $ git add *
    $ git commit -am "ajout"
    $ git push -u origin master
  Pour recopier depuis github:
    $ git pull
    
  Une copie est effectuée dans:
    http://bdavid.alwaysdata.net/yamldoc/
  
  Les 2 sites (localhost et alwaysdata) peuvent être synchronisées au travers de Github.
  
  Test de synchronisation du répertoire du projet avec ssh://bdavid@ssh-bdavid.alwaysdata.net/www/yamldoc/.git
  Test de synchronisation du répertoire des docs dans 
  
  ## synchro vers Github
  $ git remote add origin ssh://bdavid@ssh-bdavid.alwaysdata.net/www/yamldoc/.git
  $ git push -u origin master
  
  
  idées:
    - définir un affichage par défaut d'un document Yaml
    - associer à chaque type un schéma
    - générer pour chaque type une IHM de mise à jour
    - utiliser Markdown dans les textes
    
journal: |
  19/4/2018:
  - le cryptage n'est pas une bonne solution car c'est incompatible avec git
    Notamment, git ne pourra pas fusionner des documents modifiés différemment sur 2 sites.
    Il faut plutot gérer une instance git serveur distincte de github.
  18/4/2018:
  - ajout du cryptage optionnel
  8/4/2018:
  - première version
phpScripts:
  - /yamldoc/index.php
  - /yamldoc/admin.php
  - /yamldoc/crypt.php
phpIncludes:
  - /yamldoc/yd.inc.php
  - /yamldoc/catalog.inc.php
htmlFiles:
  - /yamldoc/file.yaml
