path: /yamldoc
title: yamldoc - Gestion en mode web de documents structurés en Yaml
doc: |
  Gestion d'un ensemble de documents inter-reliés.
  Chaque document est stocké dans un fichier dont le nom est éventuellement un id unique (uid) généré automatiquement.
  Le contenu du document est formatté en Yaml.
  La connaissance de l'uid d'un document permet d'y accéder en lecture et en mise à jour sauf s'il est protégé,
  ce qui est effectué en indiquant la liste des écrivains autorisés.
  Il est aussi possible de protéger un document en lecture en définissant dans le document un mot de passe.
  Un document peut être typé défini par le champ yamlClass.
  La navigation entre documents est organisée au travers de documents particuliers de type catalogue, qui référencent
  d'autres documents par leur id en leur affectant notamment un titre.
  Le visualiseur de documents mémorise le chemin des catalogues traversés ; chaque nouveau document est référencé 
  dans le dernier catalogue traversé.
  Il est recommandé à chaque utilisateur de mémoriser (par ex. en signet) l'uid de son catalogue d'accueil permettant
  d'accéder à ses documents. Cet uid identifie chaque utilisateur.
  Des gestionnaires spécifiques permettent d'éditer des documents ayant une structure particulière.
      
  Chaque document est affiché de manière générique sous la forme de tableaux Html imbriqués.
  Les tuples [key: valeur] sont affichés sous la forme d'un tableau dans lequel chaque clé/valeur correspond
  à une ligne, la clé est affichée comme première colonne et la valeur comme seconde colonne.
  Les listes de tuples sont affichées sous la forme d'un tableau avec en colonne les clés des tuples et une ligne
  par tuple.
  Les autres listes de valeurs atomiques sont affichées sous la forme d'une liste HTML.
  
  Les documents YamlData contiennent une ou plusieurs YamlDataTable qui sont des listes de tuples ayant une clé
  définie par une ou plusieurs valeurs.
  YamlDataTable expose 3 méthodes:
    - show() qui l'affiche en html
    - extract() qui traverse l'objet pour en sélectionner une partie
    - php() qui renvoie une structure Php pour une sortie Yaml ou JSON
  L'interface YamlDocElement définit l'interface d'un élément d'un YamlDoc
  
  idées:
    - utiliser Markdown dans les textes
    - revoir la notion de YamlCatalog car des documents contiennent du contenu et référencent d'autres documents
      il faudrait un concept plus souple
    - repenser l'utilisation de Git dans un contexte multi-utilisateur
    - mettre en place des URI identifiant chaque document et certains fragments
    - gérer automatiquement une page référencant les docs non référencés (lost.php)
    
journal: |
  29/5-1/6/2018:
    - ajout YamlData
  14/5/2018:
    - ajout export JSON
    - réflexion utilisation
  12-13/5/2018:
    - divers ajouts
  11/5/2018:
  - ajout protection en consultation
  - migration de Spyc vers https://github.com/symfony/yaml pour lit un fichier Yaml
    nécessite son installation par "composer require symfony/yaml"
  1-10/5/2018:
  - améliorations du visualiseur
  - ajout .htaccess dans docs pour interdire un accès http sans passer par le visualiseur
  30/4/2018:
  - restructuration du visualiseur
  26/4/2018:
  - mise en place de dépots Git sur Alwaysdata et synchro par ssh,
    voir http://localhost/yamldoc/index.php?doc=5af476a59fdc6
  19/4/2018:
  - le cryptage n'est pas une bonne solution car c'est incompatible avec git
    Notamment, git ne pourra pas fusionner des documents modifiés différemment sur 2 sites.
    Il faut plutot gérer une instance git serveur distincte de github.
  18/4/2018:
  - ajout du cryptage optionnel
  8/4/2018:
  - première version
phpScripts:
  - /yamldoc/index.php
  - /yamldoc/admin.php
phpIncludes:
  - /yamldoc/yd.inc.php
